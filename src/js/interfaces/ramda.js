declare module ramda { };
declare var __: any;
declare function add(a: number | string, b?:number | string): number & Function;
declare function always(a: any): Function;
declare function any(a: Function, a?: Array<any>): boolean & Function;
declare function adjust(f: Function, i?: number, a?: Array<any>): Array<any> & Function;
declare function append(a: any, b?: Array<any>): Array<any> & Function;
declare function both(a: Function, b?: Function): Function;
declare function compose(a: Function): Function;
declare function concat(a: Array<any>, b?: Array<any>): Array<any> & Function;
declare function contains(a: any, b?: Array<any>): boolean & Function;
declare function curry(f: Function): Function;
declare function equals(a: any, b?: any): boolean & Function;
declare function evolve(t: Object, o?: Object): Object & Function;
declare function filter(f: Function, a?: Array<any>): Array<any> & Function;
declare function find(f: Function, a?: Array<any>): any;
declare function flatten(a: Array<any>): Array<any> & Function;
declare function identity(a: any): any;
declare function indexOf(a: any, b?: Array<any>): number & Function;
declare function map(f: Function, b?: Array<any> | Object): Array<any> & Object & Function; 
declare function not(a: any): boolean & Function;
declare function or(a: any, b?: any): any & Function;
declare function path(p: Array<string>, o?: Object): any & Function;
declare function propEq(a: string, b?: any, c?: Object): boolean & Function;
declare function range(a: number, b?: number): Array<number> & Function;
declare function reduce(a: Function, b?: any, c?: Array<any>): any;
declare function reject(f: Function, a?: Array<any>): Array<any> & Function;
declare function subtract(a: number, b?:number): number & Function;
declare function unapply(f: Function): Function;
declare function uniq(a: Array<any>): Array<any> & Function;
declare function where(a: Object): boolean & Function;
